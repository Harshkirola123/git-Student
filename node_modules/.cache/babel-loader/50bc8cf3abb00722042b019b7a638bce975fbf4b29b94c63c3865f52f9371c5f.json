{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\n\n// Initial state with 'students' as the key\nconst initialState = {\n  students: []\n};\nexport const studentSlice = createSlice({\n  name: \"students\",\n  initialState,\n  reducers: {\n    addStudent: (state, action) => {\n      // Ensure 'students' is always an array\n      if (!Array.isArray(state.students)) {\n        state.students = [];\n      }\n      // Create and add the new student\n      const student = {\n        id: nanoid(),\n        name: action.payload.name,\n        mark: action.payload.mark\n      };\n      state.students.push(student);\n    },\n    deleteStudent: (state, action) => {\n      // Filter out the student with the matching ID\n      state.students = state.students.filter(student => student.id !== action.payload.id);\n    },\n    deleteAll: (state, action) => {\n      state.students = [];\n    }\n  }\n});\nexport const {\n  addStudent,\n  deleteStudent\n} = studentSlice.actions;\nexport default studentSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","students","studentSlice","name","reducers","addStudent","state","action","Array","isArray","student","id","payload","mark","push","deleteStudent","filter","deleteAll","actions","reducer"],"sources":["D:/program/React js create/studentinfo/src/feature/Slicer/studentSlice.js"],"sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\r\n\r\n// Initial state with 'students' as the key\r\nconst initialState = {\r\n    students: []\r\n};\r\n\r\nexport const studentSlice = createSlice({\r\n    name: \"students\",\r\n    initialState,\r\n    reducers: {\r\n        addStudent: (state, action) => {\r\n            // Ensure 'students' is always an array\r\n            if (!Array.isArray(state.students)) {\r\n                state.students = [];\r\n            }\r\n            // Create and add the new student\r\n            const student = { id: nanoid(), name: action.payload.name, mark: action.payload.mark };\r\n            state.students.push(student);\r\n        },\r\n        deleteStudent: (state, action) => {\r\n            // Filter out the student with the matching ID\r\n            state.students = state.students.filter(student => student.id !== action.payload.id);\r\n        },\r\n        deleteAll:(state,action)=>{\r\n            state.students =[];\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addStudent, deleteStudent } = studentSlice.actions;\r\n\r\nexport default studentSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;;AAEtD;AACA,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE;AACd,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EACpCK,IAAI,EAAE,UAAU;EAChBH,YAAY;EACZI,QAAQ,EAAE;IACNC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3B;MACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,KAAK,CAACL,QAAQ,CAAC,EAAE;QAChCK,KAAK,CAACL,QAAQ,GAAG,EAAE;MACvB;MACA;MACA,MAAMS,OAAO,GAAG;QAAEC,EAAE,EAAEZ,MAAM,CAAC,CAAC;QAAEI,IAAI,EAAEI,MAAM,CAACK,OAAO,CAACT,IAAI;QAAEU,IAAI,EAAEN,MAAM,CAACK,OAAO,CAACC;MAAK,CAAC;MACtFP,KAAK,CAACL,QAAQ,CAACa,IAAI,CAACJ,OAAO,CAAC;IAChC,CAAC;IACDK,aAAa,EAAEA,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC9B;MACAD,KAAK,CAACL,QAAQ,GAAGK,KAAK,CAACL,QAAQ,CAACe,MAAM,CAACN,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;IACvF,CAAC;IACDM,SAAS,EAACA,CAACX,KAAK,EAACC,MAAM,KAAG;MACtBD,KAAK,CAACL,QAAQ,GAAE,EAAE;IACtB;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEI,UAAU;EAAEU;AAAc,CAAC,GAAGb,YAAY,CAACgB,OAAO;AAEjE,eAAehB,YAAY,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}