{"ast":null,"code":"// import {configureStore} from '@reduxjs/toolkit'\n// import studentReducer from '../feature/Slicer/studentSlice'\n\n// export const store = configureStore({\n//     reducer: studentReducer\n// })\nimport { configureStore } from '@reduxjs/toolkit';\nimport studentReducer from './features/studentSlice'; // Adjust path if necessary\n\n// Load state from localStorage\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('studentsState');\n    if (serializedState === null) {\n      return undefined; // No state in localStorage\n    }\n    return JSON.parse(serializedState); // Return the parsed state\n  } catch (err) {\n    console.error('Failed to load state from localStorage', err);\n    return undefined;\n  }\n};\n\n// Save state to localStorage\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('studentsState', serializedState);\n  } catch (err) {\n    console.error('Failed to save state to localStorage', err);\n  }\n};\n\n// Create store with initial state\nconst store = configureStore({\n  reducer: {\n    students: studentReducer\n  },\n  preloadedState: loadState()\n});\n\n// Subscribe to store changes\nstore.subscribe(() => {\n  saveState(store.getState());\n});\nexport { store };","map":{"version":3,"names":["configureStore","studentReducer","loadState","serializedState","localStorage","getItem","undefined","JSON","parse","err","console","error","saveState","state","stringify","setItem","store","reducer","students","preloadedState","subscribe","getState"],"sources":["D:/program/React js create/studentinfo/src/app/store.js"],"sourcesContent":["// import {configureStore} from '@reduxjs/toolkit'\r\n// import studentReducer from '../feature/Slicer/studentSlice'\r\n\r\n// export const store = configureStore({\r\n//     reducer: studentReducer\r\n// })\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport studentReducer from './features/studentSlice'; // Adjust path if necessary\r\n\r\n// Load state from localStorage\r\nconst loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('studentsState');\r\n        if (serializedState === null) {\r\n            return undefined; // No state in localStorage\r\n        }\r\n        return JSON.parse(serializedState); // Return the parsed state\r\n    } catch (err) {\r\n        console.error('Failed to load state from localStorage', err);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n// Save state to localStorage\r\nconst saveState = (state) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('studentsState', serializedState);\r\n    } catch (err) {\r\n        console.error('Failed to save state to localStorage', err);\r\n    }\r\n};\r\n\r\n// Create store with initial state\r\nconst store = configureStore({\r\n    reducer: {\r\n        students: studentReducer\r\n    },\r\n    preloadedState: loadState()\r\n});\r\n\r\n// Subscribe to store changes\r\nstore.subscribe(() => {\r\n    saveState(store.getState());\r\n});\r\n\r\nexport { store };"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,cAAc,MAAM,yBAAyB,CAAC,CAAC;;AAEtD;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB,IAAI;IACA,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAC7D,IAAIF,eAAe,KAAK,IAAI,EAAE;MAC1B,OAAOG,SAAS,CAAC,CAAC;IACtB;IACA,OAAOC,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC,CAAC,CAAC;EACxC,CAAC,CAAC,OAAOM,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,wCAAwC,EAAEF,GAAG,CAAC;IAC5D,OAAOH,SAAS;EACpB;AACJ,CAAC;;AAED;AACA,MAAMM,SAAS,GAAIC,KAAK,IAAK;EACzB,IAAI;IACA,MAAMV,eAAe,GAAGI,IAAI,CAACO,SAAS,CAACD,KAAK,CAAC;IAC7CT,YAAY,CAACW,OAAO,CAAC,eAAe,EAAEZ,eAAe,CAAC;EAC1D,CAAC,CAAC,OAAOM,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEF,GAAG,CAAC;EAC9D;AACJ,CAAC;;AAED;AACA,MAAMO,KAAK,GAAGhB,cAAc,CAAC;EACzBiB,OAAO,EAAE;IACLC,QAAQ,EAAEjB;EACd,CAAC;EACDkB,cAAc,EAAEjB,SAAS,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAc,KAAK,CAACI,SAAS,CAAC,MAAM;EAClBR,SAAS,CAACI,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC;AAEF,SAASL,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}