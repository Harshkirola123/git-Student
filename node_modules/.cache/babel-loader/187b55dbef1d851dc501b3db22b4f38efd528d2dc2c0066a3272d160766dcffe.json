{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\n// import { act } from \"react\";\n\n// Initial state with 'students' as the key\n\nconst students = JSON.parse(localStorage.getItem('studentStore')) || [];\nconst initialState = {\n  students: students\n};\nexport const studentSlice = createSlice({\n  name: \"students\",\n  initialState,\n  reducers: {\n    addStudent: (state, action) => {\n      // Ensure 'students' is always an array\n      if (!Array.isArray(state.students)) {\n        state.students = [];\n      }\n      // Create and add the new student\n      const student = {\n        id: nanoid(),\n        name: action.payload.name,\n        mark: action.payload.mark\n      };\n      state.students.push(student);\n      localStorage.setItem('studentStore', JSON.stringify(state.students));\n    },\n    deleteStudent: (state, action) => {\n      // Filter out the student with the matching ID\n      state.students = state.students.filter(student => student.id !== action.payload.id);\n    },\n    deleteAll: (state, action) => {\n      state.students = [];\n    },\n    updateStudent: (state, action) => {\n      const {\n        id,\n        name,\n        mark\n      } = action.payload;\n      const studentIndex = state.students.findIndex(student => student.id === id);\n      if (studentIndex !== -1) {\n        const existingStudent = state.students[studentIndex];\n        state.students[studentIndex] = {\n          ...existingStudent,\n          ...(name !== undefined && name !== \"\" ? {\n            name\n          } : existingStudent.name),\n          ...(mark !== undefined ? {\n            mark\n          } : existingStudent.mark)\n        };\n      }\n    }\n  }\n});\nexport const {\n  addStudent,\n  deleteStudent,\n  deleteAll,\n  updateStudent\n} = studentSlice.actions;\nexport default studentSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","students","JSON","parse","localStorage","getItem","initialState","studentSlice","name","reducers","addStudent","state","action","Array","isArray","student","id","payload","mark","push","setItem","stringify","deleteStudent","filter","deleteAll","updateStudent","studentIndex","findIndex","existingStudent","undefined","actions","reducer"],"sources":["D:/program/React js create/studentinfo/src/feature/Slicer/studentSlice.js"],"sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\r\n// import { act } from \"react\";\r\n\r\n// Initial state with 'students' as the key\r\n\r\nconst students = JSON.parse(localStorage.getItem('studentStore')) || [];\r\nconst initialState = {\r\n    students: students\r\n};\r\n\r\nexport const studentSlice = createSlice({\r\n    name: \"students\",\r\n    initialState,\r\n    reducers: {\r\n        addStudent: (state, action) => {\r\n            // Ensure 'students' is always an array\r\n            if (!Array.isArray(state.students)) {\r\n                state.students = [];\r\n            }\r\n            // Create and add the new student\r\n            const student = { id: nanoid(), name: action.payload.name, mark: action.payload.mark };\r\n            state.students.push(student);\r\n\r\n            localStorage.setItem('studentStore',JSON.stringify(state.students));\r\n        },\r\n        deleteStudent: (state, action) => {\r\n            // Filter out the student with the matching ID\r\n            state.students = state.students.filter(student => student.id !== action.payload.id);\r\n        },\r\n        deleteAll:(state,action)=>{\r\n            state.students =[];\r\n        },\r\n        updateStudent: (state, action) => {\r\n            const { id, name, mark } = action.payload;\r\n            const studentIndex = state.students.findIndex(student => student.id === id);\r\n            if (studentIndex !== -1) {\r\n                const existingStudent = state.students[studentIndex];\r\n                state.students[studentIndex] = {\r\n                    ...existingStudent,\r\n                    ...(name !== undefined && name !== \"\" ? { name } : existingStudent.name),\r\n                    ...(mark !== undefined ? { mark } : existingStudent.mark),\r\n                };\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addStudent, deleteStudent,deleteAll,updateStudent } = studentSlice.actions;\r\n\r\nexport default studentSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AACtD;;AAEA;;AAEA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,IAAI,EAAE;AACvE,MAAMC,YAAY,GAAG;EACjBL,QAAQ,EAAEA;AACd,CAAC;AAED,OAAO,MAAMM,YAAY,GAAGR,WAAW,CAAC;EACpCS,IAAI,EAAE,UAAU;EAChBF,YAAY;EACZG,QAAQ,EAAE;IACNC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3B;MACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,KAAK,CAACV,QAAQ,CAAC,EAAE;QAChCU,KAAK,CAACV,QAAQ,GAAG,EAAE;MACvB;MACA;MACA,MAAMc,OAAO,GAAG;QAAEC,EAAE,EAAEhB,MAAM,CAAC,CAAC;QAAEQ,IAAI,EAAEI,MAAM,CAACK,OAAO,CAACT,IAAI;QAAEU,IAAI,EAAEN,MAAM,CAACK,OAAO,CAACC;MAAK,CAAC;MACtFP,KAAK,CAACV,QAAQ,CAACkB,IAAI,CAACJ,OAAO,CAAC;MAE5BX,YAAY,CAACgB,OAAO,CAAC,cAAc,EAAClB,IAAI,CAACmB,SAAS,CAACV,KAAK,CAACV,QAAQ,CAAC,CAAC;IACvE,CAAC;IACDqB,aAAa,EAAEA,CAACX,KAAK,EAAEC,MAAM,KAAK;MAC9B;MACAD,KAAK,CAACV,QAAQ,GAAGU,KAAK,CAACV,QAAQ,CAACsB,MAAM,CAACR,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;IACvF,CAAC;IACDQ,SAAS,EAACA,CAACb,KAAK,EAACC,MAAM,KAAG;MACtBD,KAAK,CAACV,QAAQ,GAAE,EAAE;IACtB,CAAC;IACDwB,aAAa,EAAEA,CAACd,KAAK,EAAEC,MAAM,KAAK;MAC9B,MAAM;QAAEI,EAAE;QAAER,IAAI;QAAEU;MAAK,CAAC,GAAGN,MAAM,CAACK,OAAO;MACzC,MAAMS,YAAY,GAAGf,KAAK,CAACV,QAAQ,CAAC0B,SAAS,CAACZ,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC3E,IAAIU,YAAY,KAAK,CAAC,CAAC,EAAE;QACrB,MAAME,eAAe,GAAGjB,KAAK,CAACV,QAAQ,CAACyB,YAAY,CAAC;QACpDf,KAAK,CAACV,QAAQ,CAACyB,YAAY,CAAC,GAAG;UAC3B,GAAGE,eAAe;UAClB,IAAIpB,IAAI,KAAKqB,SAAS,IAAIrB,IAAI,KAAK,EAAE,GAAG;YAAEA;UAAK,CAAC,GAAGoB,eAAe,CAACpB,IAAI,CAAC;UACxE,IAAIU,IAAI,KAAKW,SAAS,GAAG;YAAEX;UAAK,CAAC,GAAGU,eAAe,CAACV,IAAI;QAC5D,CAAC;MACL;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER,UAAU;EAAEY,aAAa;EAACE,SAAS;EAACC;AAAc,CAAC,GAAGlB,YAAY,CAACuB,OAAO;AAEzF,eAAevB,YAAY,CAACwB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}