{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\n// import { act } from \"react\";\n\n// Initial state with 'students' as the key\nconst initialState = {\n  students: []\n};\nexport const studentSlice = createSlice({\n  name: \"students\",\n  initialState,\n  reducers: {\n    addStudent: (state, action) => {\n      // Ensure 'students' is always an array\n      if (!Array.isArray(state.students)) {\n        state.students = [];\n      }\n      // Create and add the new student\n      const student = {\n        id: nanoid(),\n        name: action.payload.name,\n        mark: action.payload.mark\n      };\n      state.students.push(student);\n      localStorage.setItem('studentStore', JSON.stringify(state.students));\n    },\n    deleteStudent: (state, action) => {\n      // Filter out the student with the matching ID\n      state.students = state.students.filter(student => student.id !== action.payload.id);\n    },\n    deleteAll: (state, action) => {\n      state.students = [];\n    },\n    updateStudent: (state, action) => {\n      const {\n        id,\n        name,\n        mark\n      } = action.payload;\n      const studentIndex = state.students.findIndex(student => student.id === id);\n      if (studentIndex !== -1) {\n        const existingStudent = state.students[studentIndex];\n        state.students[studentIndex] = {\n          ...existingStudent,\n          ...(name !== undefined && name !== \"\" ? {\n            name\n          } : existingStudent.name),\n          ...(mark !== undefined ? {\n            mark\n          } : existingStudent.mark)\n        };\n      }\n    }\n  }\n});\nexport const {\n  addStudent,\n  deleteStudent,\n  deleteAll,\n  updateStudent\n} = studentSlice.actions;\nexport default studentSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","students","studentSlice","name","reducers","addStudent","state","action","Array","isArray","student","id","payload","mark","push","localStorage","setItem","JSON","stringify","deleteStudent","filter","deleteAll","updateStudent","studentIndex","findIndex","existingStudent","undefined","actions","reducer"],"sources":["D:/program/React js create/studentinfo/src/feature/Slicer/studentSlice.js"],"sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\r\n// import { act } from \"react\";\r\n\r\n// Initial state with 'students' as the key\r\nconst initialState = {\r\n    students: []\r\n};\r\n\r\nexport const studentSlice = createSlice({\r\n    name: \"students\",\r\n    initialState,\r\n    reducers: {\r\n        addStudent: (state, action) => {\r\n            // Ensure 'students' is always an array\r\n            if (!Array.isArray(state.students)) {\r\n                state.students = [];\r\n            }\r\n            // Create and add the new student\r\n            const student = { id: nanoid(), name: action.payload.name, mark: action.payload.mark };\r\n            state.students.push(student);\r\n\r\n            localStorage.setItem('studentStore',JSON.stringify(state.students));\r\n        },\r\n        deleteStudent: (state, action) => {\r\n            // Filter out the student with the matching ID\r\n            state.students = state.students.filter(student => student.id !== action.payload.id);\r\n        },\r\n        deleteAll:(state,action)=>{\r\n            state.students =[];\r\n        },\r\n        updateStudent: (state, action) => {\r\n            const { id, name, mark } = action.payload;\r\n            const studentIndex = state.students.findIndex(student => student.id === id);\r\n            if (studentIndex !== -1) {\r\n                const existingStudent = state.students[studentIndex];\r\n                state.students[studentIndex] = {\r\n                    ...existingStudent,\r\n                    ...(name !== undefined && name !== \"\" ? { name } : existingStudent.name),\r\n                    ...(mark !== undefined ? { mark } : existingStudent.mark),\r\n                };\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addStudent, deleteStudent,deleteAll,updateStudent } = studentSlice.actions;\r\n\r\nexport default studentSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AACtD;;AAEA;AACA,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE;AACd,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EACpCK,IAAI,EAAE,UAAU;EAChBH,YAAY;EACZI,QAAQ,EAAE;IACNC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3B;MACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,KAAK,CAACL,QAAQ,CAAC,EAAE;QAChCK,KAAK,CAACL,QAAQ,GAAG,EAAE;MACvB;MACA;MACA,MAAMS,OAAO,GAAG;QAAEC,EAAE,EAAEZ,MAAM,CAAC,CAAC;QAAEI,IAAI,EAAEI,MAAM,CAACK,OAAO,CAACT,IAAI;QAAEU,IAAI,EAAEN,MAAM,CAACK,OAAO,CAACC;MAAK,CAAC;MACtFP,KAAK,CAACL,QAAQ,CAACa,IAAI,CAACJ,OAAO,CAAC;MAE5BK,YAAY,CAACC,OAAO,CAAC,cAAc,EAACC,IAAI,CAACC,SAAS,CAACZ,KAAK,CAACL,QAAQ,CAAC,CAAC;IACvE,CAAC;IACDkB,aAAa,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MAC9B;MACAD,KAAK,CAACL,QAAQ,GAAGK,KAAK,CAACL,QAAQ,CAACmB,MAAM,CAACV,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;IACvF,CAAC;IACDU,SAAS,EAACA,CAACf,KAAK,EAACC,MAAM,KAAG;MACtBD,KAAK,CAACL,QAAQ,GAAE,EAAE;IACtB,CAAC;IACDqB,aAAa,EAAEA,CAAChB,KAAK,EAAEC,MAAM,KAAK;MAC9B,MAAM;QAAEI,EAAE;QAAER,IAAI;QAAEU;MAAK,CAAC,GAAGN,MAAM,CAACK,OAAO;MACzC,MAAMW,YAAY,GAAGjB,KAAK,CAACL,QAAQ,CAACuB,SAAS,CAACd,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC3E,IAAIY,YAAY,KAAK,CAAC,CAAC,EAAE;QACrB,MAAME,eAAe,GAAGnB,KAAK,CAACL,QAAQ,CAACsB,YAAY,CAAC;QACpDjB,KAAK,CAACL,QAAQ,CAACsB,YAAY,CAAC,GAAG;UAC3B,GAAGE,eAAe;UAClB,IAAItB,IAAI,KAAKuB,SAAS,IAAIvB,IAAI,KAAK,EAAE,GAAG;YAAEA;UAAK,CAAC,GAAGsB,eAAe,CAACtB,IAAI,CAAC;UACxE,IAAIU,IAAI,KAAKa,SAAS,GAAG;YAAEb;UAAK,CAAC,GAAGY,eAAe,CAACZ,IAAI;QAC5D,CAAC;MACL;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER,UAAU;EAAEc,aAAa;EAACE,SAAS;EAACC;AAAc,CAAC,GAAGpB,YAAY,CAACyB,OAAO;AAEzF,eAAezB,YAAY,CAAC0B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}