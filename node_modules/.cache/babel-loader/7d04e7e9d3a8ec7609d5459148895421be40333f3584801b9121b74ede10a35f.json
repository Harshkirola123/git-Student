{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport studentReducer from '../feature/Slicer/studentSlice';\nexport const store = configureStore({\n  reducer: studentReducer\n});\n// import { configureStore } from '@reduxjs/toolkit';\n// import studentReducer from '../feature/Slicer/studentSlice'; // Adjust path if necessary\n\n// // Load state from localStorage\n// const loadState = () => {\n//     try {\n//         const serializedState = localStorage.getItem('studentsState');\n//         if (serializedState === null) {\n//             return undefined; // Return undefined if no state in localStorage\n//         }\n//         // Parse and return the state\n//         return { students: JSON.parse(serializedState) }; // Adjust to match your state structure\n//     } catch (err) {\n//         console.error('Failed to load state from localStorage', err);\n//         return undefined; // Return undefined on error\n//     }\n// };\n\n// // Save state to localStorage\n// const saveState = (state) => {\n//     try {\n//         const serializedState = JSON.stringify(state.students); // Access the specific part of state\n//         localStorage.setItem('studentsState', serializedState);\n//     } catch (err) {\n//         console.error('Failed to save state to localStorage', err);\n//     }\n// };\n\n// // Create store with initial state\n// export const store = configureStore({\n//     reducer: {\n//         students: studentReducer\n//     },\n//     preloadedState: loadState()\n// });\n\n// // Subscribe to store changes\n// store.subscribe(() => {\n//     saveState(store.getState());\n// });","map":{"version":3,"names":["configureStore","studentReducer","store","reducer"],"sources":["D:/program/React js create/studentinfo/src/app/store.js"],"sourcesContent":["import {configureStore} from '@reduxjs/toolkit'\r\nimport studentReducer from '../feature/Slicer/studentSlice'\r\n\r\nexport const store = configureStore({\r\n    reducer: studentReducer\r\n})\r\n// import { configureStore } from '@reduxjs/toolkit';\r\n// import studentReducer from '../feature/Slicer/studentSlice'; // Adjust path if necessary\r\n\r\n// // Load state from localStorage\r\n// const loadState = () => {\r\n//     try {\r\n//         const serializedState = localStorage.getItem('studentsState');\r\n//         if (serializedState === null) {\r\n//             return undefined; // Return undefined if no state in localStorage\r\n//         }\r\n//         // Parse and return the state\r\n//         return { students: JSON.parse(serializedState) }; // Adjust to match your state structure\r\n//     } catch (err) {\r\n//         console.error('Failed to load state from localStorage', err);\r\n//         return undefined; // Return undefined on error\r\n//     }\r\n// };\r\n\r\n// // Save state to localStorage\r\n// const saveState = (state) => {\r\n//     try {\r\n//         const serializedState = JSON.stringify(state.students); // Access the specific part of state\r\n//         localStorage.setItem('studentsState', serializedState);\r\n//     } catch (err) {\r\n//         console.error('Failed to save state to localStorage', err);\r\n//     }\r\n// };\r\n\r\n// // Create store with initial state\r\n// export const store = configureStore({\r\n//     reducer: {\r\n//         students: studentReducer\r\n//     },\r\n//     preloadedState: loadState()\r\n// });\r\n\r\n// // Subscribe to store changes\r\n// store.subscribe(() => {\r\n//     saveState(store.getState());\r\n// });\r\n"],"mappings":"AAAA,SAAQA,cAAc,QAAO,kBAAkB;AAC/C,OAAOC,cAAc,MAAM,gCAAgC;AAE3D,OAAO,MAAMC,KAAK,GAAGF,cAAc,CAAC;EAChCG,OAAO,EAAEF;AACb,CAAC,CAAC;AACF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}